// route.js
import { NextResponse } from 'next/server';
import { SendMailClient } from "zeptomail";

// --- ZeptoMail Configuration (Server-Side) ---
const ZEPTOMAIL_API_URL = "api.zeptomail.com/";
// IMPORTANT: Use the non-public environment variable here
const ZEPTOMAIL_TOKEN = process.env.ZEPTOMAIL_TOKEN;
// ACTUAL SENDER (Verified in ZeptoMail)
const ZEPTO_VERIFIED_SENDER_EMAIL = "orders@setindiabiz.com"; 
const ZEPTO_VERIFIED_SENDER_NAME = "SetIndiaBiz Report System"; // Display name for the "From" address

// PRIMARY RECIPIENT of the report email
const ZEPTO_PRIMARY_RECIPIENT_EMAIL = "tanvibhasin695@gmail.com";
const ZEPTO_PRIMARY_RECIPIENT_NAME = "SetIndiaBiz Helpdesk";

// Optional: If Tanvi still needs a copy. Otherwise, set to null or remove.
const ZEPTO_CC_ADMIN_EMAIL = "tanvi.bhasin@hatrotech.com"; 
const ZEPTO_CC_ADMIN_NAME = "Tanvi Bhasin";


export async function POST(request) {
    // Basic validation for ZeptoMail config on the server
    if (!ZEPTOMAIL_TOKEN || !ZEPTO_VERIFIED_SENDER_EMAIL) { // Corrected variable name here
        console.error("SERVER ERROR: ZeptoMail Token or From Address not configured.");
        return NextResponse.json({ success: false, message: "Server configuration error." }, { status: 500 });
    }

    try {
        const body = await request.json();

        // Destructure and validate required fields from the request body
        const {
            reporterName, 
            reporterEmail, 
            reportMessage, 
            companyName,
            companyCin,
            attachmentContent, // Expect base64 encoded file content from client
            attachmentName,    // Expect file name from client
            attachmentMimeType // Expect file mime type from client
        } = body;

        if (!reporterName || !reporterEmail || !reportMessage || !companyName || !companyCin) {
            return NextResponse.json({ success: false, message: "Missing required fields for reporting change." }, { status: 400 });
        }

        // Construct Email Body (Plain text or HTML)
        const emailSubject = `Data Correction Report: ${companyName} (CIN: ${companyCin}) - By ${reporterName}`;
        const emailHtmlBody = `
            <div style="font-family: Arial, sans-serif; line-height: 1.6;">
                <h2>Data Correction Report Received</h2>
                <p>A change has been reported for the company: <strong>${companyName}</strong> (CIN: ${companyCin}).</p>
                <hr style="border: 0; border-top: 1px solid #eee; margin: 20px 0;">
                <p><strong>Reported By:</strong></p>
                <ul style="list-style-type: none; padding-left: 0;">
                    <li><strong>Name:</strong> ${reporterName}</li>
                    <li><strong>Email:</strong> ${reporterEmail} <em>(Replies to this email will go to this address)</em></li>
                </ul>
                <p><strong>Report Details:</strong></p>
                <div style="background-color: #f9f9f9; border: 1px solid #ddd; padding: 15px; border-radius: 4px; margin-bottom: 20px;">
                    ${reportMessage.replace(/\n/g, '<br>')}
                </div>
                ${attachmentName ? `<p><strong>Attachment:</strong> ${attachmentName}</p>` : ''}
                <p><i>Please review this report and take necessary action.</i></p>
                <hr style="border: 0; border-top: 1px solid #eee; margin: 20px 0;">
                <p style="font-size: 0.9em; color: #777;">This email was generated by the SetIndiaBiz reporting system.</p>
            </div>
        `;

        // Initialize ZeptoMail Client
        const client = new SendMailClient({ url: ZEPTOMAIL_API_URL, token: ZEPTOMAIL_TOKEN });

        const mailData = {
            "from": { // This is who the email is ACTUALLY sent from (your verified sender)
                "address": ZEPTO_VERIFIED_SENDER_EMAIL,
                "name": ZEPTO_VERIFIED_SENDER_NAME
            },
            "to": [{ // This is the PRIMARY recipient
                "email_address": {
                    "address": ZEPTO_PRIMARY_RECIPIENT_EMAIL, // help@setindiabiz.com
                    "name": ZEPTO_PRIMARY_RECIPIENT_NAME
                }
            }],
            "cc": [], // Initialize CC array
            "bcc": [{ // BCC the user who reported, so they get a copy
                "email_address": {
                    "address": reporterEmail,
                    "name": reporterName
                }
            }],
            "reply_to": [{ // IMPORTANT: Replies from helpdesk/admin will go to the user
                "address": reporterEmail,
                "name": reporterName
            }],
            "subject": emailSubject,
            "htmlbody": emailHtmlBody,
            "attachments": []
        };

         // Optionally add Tanvi (or other admins) to CC
        if (ZEPTO_CC_ADMIN_EMAIL && ZEPTO_CC_ADMIN_NAME) {
            mailData.cc.push({
                "email_address": {
                    "address": ZEPTO_CC_ADMIN_EMAIL,
                    "name": ZEPTO_CC_ADMIN_NAME
                }
            });
        }

        if (attachmentContent && attachmentName) {
            mailData.attachments.push({
                "content": attachmentContent, // Base64 encoded content from client
                "name": attachmentName,
                "mime_type": attachmentMimeType || "application/octet-stream"
            });
        }
        
        const ccRecipients = mailData.cc.map(c => c.email_address.address).join(', ') || 'None';
        console.log(`API Route: Sending report. To: ${ZEPTO_PRIMARY_RECIPIENT_EMAIL}, CC: ${ccRecipients}, BCC: ${reporterEmail}, ReplyTo: ${reporterEmail}`);
        

        // Send the email
        const response = await client.sendMail(mailData);
        console.log("ZeptoMail API Response:", response);

        // Check ZeptoMail response structure for success
        if (response && (response.message === "OK" || (response.data && response.data.length > 0 && response.data[0].message === "Mail sent successfully") || (response.request_id && response.message === "success") )) {
             console.log(`API Route: Change report email sent successfully.`);
             return NextResponse.json({ success: true, message: "Report sent successfully." });
        } else {
             // Try to get a more specific error message from ZeptoMail response
             const zeptoErrorMessage = response?.data?.[0]?.error_details?.message || response?.message || "ZeptoMail failed to send email.";
             console.error("ZeptoMail send error details:", response);
             throw new Error(zeptoErrorMessage);
        }

    } catch (error) {
        console.error("API Route Error (report-change):", error);
        const errorMessage = error.message || "Failed to send report."; // Use error.message directly
        const statusCode = 500; // Default to 500, adjust if more specific error info is available
        return NextResponse.json({ success: false, message: errorMessage }, { status: statusCode });
    }
}
